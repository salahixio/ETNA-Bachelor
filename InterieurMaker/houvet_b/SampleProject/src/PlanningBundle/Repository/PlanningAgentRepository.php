<?php

namespace PlanningBundle\Repository;

/**
 * PlanningAgentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanningAgentRepository extends \Doctrine\ORM\EntityRepository
{
    public function hasDomaine($id_domaine, $id_agent){

	$exist = $this->_em->createQuery('SELECT pu.id
   		FROM PlanningBundle:PlanningAgent pu
        	WHERE pu.idAgent = :id_agent AND pu.idDomaine = :domaine')
            ->setParameters(array(
            	    'id_agent' => $id_agent,
		    'domaine' => $id_domaine[0]['id']
        	))
            ->getResult();
        if (empty($exist))
            return 0;
        else
            return 1;
    }

    public function isDispo($id_agent, $date){
	$exist = $this->_em->createQuery('SELECT p.id
   		FROM PlanningBundle:Planning p
        	WHERE p.idAgent = :id_agent AND p.heureDebut = :startDate')
            ->setParameters(array(
            	    'id_agent' => $id_agent,
		    'startDate' => $date
        	))
            ->getResult();
        if (empty($exist))
            return 1;
        else
            return 0;
    }

    /**
     *
     * Return Agent Planning for one Day
     *
     * @param $user (With FOS)
     * @param $date format Day's Datetime with hour at midnight
     * @return array|null
     */

    public function getPlanningAgentDay($user, $date)
    {
        $endDate = clone $date;
        $endDate->modify('+1 day');
        $planning = $this->_em->createQuery('SELECT p.heureDebut, f.idDomaine, f.id
        FROM PlanningBundle:Planning p, PlanningBundle:FicheIntervention f
        WHERE p.idFiche = f.id AND p.idAgent = :user AND p.heureDebut BETWEEN :startDate AND :endDate'
        )->setParameters(array(
            'user' => $user,
            'startDate' => $date,
            'endDate' => $endDate
        ))->getResult();
        if (empty($planning))
            return NULL;
        else
            return $planning;
    }

    /**
     *
     * Return Agent Planning for one Week
     *
     * @param $user (With FOS)
     * @param $date format Monday's Datetime with hour at midnight
     * @return array|null
     */
    public function getPlanningAgentWeek($user, $date)
    {
        $planningWeekly = array();
        for($i = 0; $i < 5; $i++)
        {
            if (($planningDay = $this->getPlanningAgentDay($user, $date)) != NULL)
                array_push($planningWeekly, $planningDay);
            $date->modify('+1 day');
        }
        if (empty($planningWeekly))
            return NULL;
        else
            return $planningWeekly;
    }
}
