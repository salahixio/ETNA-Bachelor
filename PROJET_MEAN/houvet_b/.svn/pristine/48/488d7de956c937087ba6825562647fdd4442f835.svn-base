var express     =   require("express");
var app         =   express();
var bodyParser  =   require("body-parser");
var mongoose    =   require("mongoose");


mongoose.connect('mongodb://localhost:27017/mean');
var mongoSchema =   mongoose.Schema;


var commentaireSchema = new mongoSchema({
	"commentaireDate" :  { type: Date, default: Date.now },
    "commentaireContenu" : String,
    "commentaireAuteur" : String
});

var articleSchema  = new mongoSchema({
    "articleTitre" : String,
    "articleDate" :  { type: Date, default: Date.now },
    "articleContenu" : String,
    "articleAuteur" : String,
    "articleComment" : [ commentaireSchema ]
});
var article = mongoose.model('article',articleSchema);
var commentaire = mongoose.model('commentaire',commentaireSchema);


app.use(bodyParser.json());
app.use(bodyParser.urlencoded({"extended" : false}));

app.get("/article",function(req,res){
    var response = {};
        article.find().sort("-articleDate").exec(function(err,data){
            if(err) {
                response = {"error" : true,"message" : "Error fetching data"};
            } else {
                response = {"error" : false,"data" : data};
            }
            res.json(response);
        });
});

app.get("/article/:id", function(req, res){
	var response = {};
        article.findById(req.params.id,function(err,data){
            if(err) {
                response = {"error" : true,"message" : "Error fetching data"};
            } else {
                response = {"error" : false,"data" : data};
            }
            res.json(response);
        });
});

app.post("/article",function(req,res){
   var db = new article();
        var response = {};
		db.articleTitre = req.body.titre;
		db.articleContenu = req.body.contenu;
		db.articleAuteur = req.body.auteur;
        db.save(function(err){
            if(err) {
                response = {"error" : true,"message" : "Error adding data"};
            } else {
                response = {"error" : false,"message" : "Data added"};
            }
            res.json(response);     
        });
});

app.post("/article/:id",function(req,res){
	var response = {};
	var articleEnCour = new article();
	article.findById(req.params.id,function(err,data){
		if(err) {
			response = {"error" : true,"message" : "Error fetching data"};
			res.json(response);
		} else {
			data.articleComment.push({commentaireAuteur: req.body.auteur,commentaireContenu: req.body.contenu});
			data.save(function(err){
				if(err) {
					response = {"error" : true,"message" : "Error update data"};
				} else {
					response = {"error" : false,"message" : "Data update"};
				}
				res.json(response);
            });
		}
	});
});

app.put("/article/:id", function(req, res){
	article.findById(req.params.id, function(err, data) {
		if (err)
			res.send(err);
		if(req.body.auteur != "")
			data.articleAuteur = req.body.auteur;
		if(req.body.titre != "")
			data.articleTitre = req.body.titre;
		if(req.body.date != "")
			data.articleDate = req.body.date;
		if(req.body.contenu != "")
			data.articleContenu = req.body.contenu;
		data.save(function(err) {
			if (err)
				res.send(err);
			res.json({ message: 'Data updated!' });
		});

	});
});

app.delete("/article/:id", function(req, res){
	article.remove({_id: req.params.id}, function(err, data) {
		if (err)
			res.send(err);
		res.json({ message: 'Data deleted' });
	});
});


app.put("/commentaire/:id", function(req, res){
	commentaire.find({}, function(err, data) {
		if (err)
			res.send(err);
		console.log(data);
		res.send("fin");
		/*if(req.body.auteur != "")
			data.commentaireAuteur = req.body.auteur;
		if(req.body.date != "")
			data.commentaireDate = req.body.date;
		if(req.body.contenu != "")
			data.commentaireContenu = req.body.contenu;
		data.save(function(err) {
			if (err)
				res.send(err);
			res.json({ message: 'Data updated!' });
		});*/

	});
});

app.delete("/commentaire/:id", function(req, res){
	commentaire.remove({_id: req.params.id}, function(err, data) {
		if (err)
			res.send(err);
		res.json({ message: 'Data deleted' });
	});
});

app.listen(3000);